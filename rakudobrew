#!/usr/bin/env perl
use strict;
use warnings;
use autodie;
use 5.010;

my $arg = shift // 'help';
my $home = $ENV{HOME};
my $prefix = "$home/.rakudobrew";

if ($arg eq 'switch') {
    my $impl = shift;
    switch($impl);
} elsif ($arg eq 'list') {
    list();
} elsif ($arg eq 'current') {
    if (-e "$prefix/CURRENT") {
        print "Currently running ".slurp("$prefix/CURRENT");
    } else {
        say "Not running anything at the moment. Use 'rakudobrew switch' to set an implementation";
    }
} elsif ($arg eq 'build') {
    my $impl = shift;
    if ($impl eq 'all') {
        build_jvm();
        build_parrot();
    } elsif ($impl eq 'jvm') {
        build_jvm();
    } elsif ($impl eq 'parrot') {
        my $ver = shift // 'HEAD';
        build_parrot($ver);
    } else {
        say "Building $impl is NYI. Well volunteered!"
    }
} else {
    say "Usage:";
    say "rakudobrew current";
    say "rakudobrew list";
    say "rakudobrew build parrot-2013.06";
    say "rakudobrew switch [jvm|parrot|moarvm]";
}

sub list {
    opendir(my $dh, "$home/.rakudobrew");
    while (readdir $dh) {
        if (-d "$prefix/$_" and "$_" !~ /^\./) {
            say $_
        }
    }
}

sub switch {
    my $impl = shift;
    if ($impl) {
        if (-d "$prefix/$impl") {
            say "Switching to $impl";
            spurt("$prefix/CURRENT", $impl);
        } else {
            say "$impl not installed"
        }
    } else {
        say "Switch to what?";
        say "Available implementations:";
        list();
    }
}

sub build_jvm {
    chdir $prefix;
    unless (-d 'jvm') {
        system "git clone git://github.com/rakudo/rakudo.git jvm";
    }
    chdir 'jvm';
    system 'git pull';
    unless (-d 'nqp') {
        system "git clone git://github.com/perl6/nqp.git";
    }
    chdir 'nqp';
    system 'git pull';
    if (-e 'Makefile') {
        system 'make clean';
    }
    system 'perl ConfigureJVM.pl';
    system 'make install';
    chdir '..';
    if (-e 'Makefile') {
        system 'make realclean';
    }
    system "perl ConfigureJVM.pl --with-nqp=$prefix/jvm/nqp/install/nqp";
    system 'make';
    say "Done, jvm built";
}

sub build_parrot {
    my $ver = shift;
    chdir $prefix;
    unless (-d "parrot-$ver") {
        system "git clone git://github.com/rakudo/rakudo.git parrot-$ver";
    }
    chdir "parrot-$ver";
    system 'git pull';
    system "git checkout $ver";
    if (-e 'Makefile') {
        system 'make realclean';
    }
    system 'perl Configure.pl --gen-parrot --gen-nqp';
    system 'make install';
    say "Done, parrot-$ver built";
}

sub slurp {
    my $file = shift;
    open(my $fh, '<', $file);
    local $/ = '';
    my $ret = <$fh>;
    close($fh);
    return $ret;
}

sub spurt {
    my ($file, $cont) = @_;
    open(my $fh, '>', $file);
    say $fh $cont;
    close($fh);
}
