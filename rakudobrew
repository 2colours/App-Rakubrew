#!/usr/bin/env perl
use strict;
use warnings;
use autodie;
use 5.010;

my $arg = shift // 'help';
my $home = $ENV{HOME};
my $prefix = "$home/.rakudobrew";

my %impls = (
    parrot => {
        configure => 'perl Configure.pl --gen-parrot --gen-nqp'
    },
    jvm => {
        configure => 'perl ConfigureJVM.pl --gen-nqp'
    },
);

if ($arg eq 'switch') {
    my $impl = shift;
    switch($impl);
} elsif ($arg eq 'list') {
    list();
} elsif ($arg eq 'current') {
    if (-e "$prefix/CURRENT") {
        say "Currently running " . current()
    } else {
        say "Not running anything at the moment. Use 'rakudobrew switch' to set an implementation";
    }
} elsif ($arg eq 'build') {
    my ($impl, $ver) = (shift, shift);
    if ($impl eq 'all') {
        for (qw(parrot jvm)) {
            build_impl($_, $ver);
        }
    } else {
        build_impl($impl, $ver);
    }
} elsif ($arg eq 'build-panda') {
    build_panda();
} else {
    say "Usage:";
    say "rakudobrew current";
    say "rakudobrew list";
    say "rakudobrew build parrot-2013.06";
    say "rakudobrew switch [jvm|parrot|moarvm]";
}

sub current {
    my $cur = slurp("$prefix/CURRENT");
    chomp $cur;
    return $cur;
}

sub list {
    my $cur = current();
    opendir(my $dh, "$home/.rakudobrew");
    while (readdir $dh) {
        if (-d "$prefix/$_" and "$_" !~ /^\./) {
            say $cur eq $_ ? "* $_" : "  $_";
        }
    }
}

sub switch {
    my $impl = shift;
    if (!$impl) {
        say "Switch to what?";
        say "Available implementations:";
        list();
        return;
    }
    opendir(my $dh, $prefix);
    my @dirs = grep {/^[^.]/ && -d "$prefix/$_"} readdir($dh);
    my @match = grep { /$impl/ } @dirs;
    my $ambiguous;
    ($impl, $ambiguous) = @match;
    if (not $ambiguous) {
        say "Switching to $impl";
        spurt("$prefix/CURRENT", $impl);
    } else {
        say "Sorry, I'm not sure if you mean:";
        say $_ for @match;
    }
}

sub build_impl {
    my ($impl, $ver) = @_;
    unless (exists $impls{$impl}) {
        say "Building $impl is NYI. Well volunteered!";
        return;
    }
    $ver //= 'HEAD';
    chdir $prefix;
    unless (-d "$impl-$ver") {
        system "git clone git://github.com/rakudo/rakudo.git $impl-$ver";
    }
    chdir "$impl-$ver";
    system 'git pull';
    system "git checkout $ver";
    if (-e 'Makefile') {
        system 'make realclean';
    }
    system $impls{$impl}{configure};
    system 'make install';
    if (-d 'panda') {
        say "Updating panda as well";
        my $oldcur = current();
        switch("$impl-$ver");
        build_panda();
        switch($oldcur);
    }
    say "Done, $impl-$ver built";
}

sub build_panda {
    my $impl = current();
    chdir "$prefix/$impl";
    unless (-d 'panda') {
        system 'git clone git://github.com/tadzik/panda.git';
    }
    chdir 'panda';
    system 'git pull';
    system 'perl6 rebootstrap.pl';
    say "Done, built panda for $impl";
}

sub slurp {
    my $file = shift;
    open(my $fh, '<', $file);
    local $/ = '';
    my $ret = <$fh>;
    close($fh);
    return $ret;
}

sub spurt {
    my ($file, $cont) = @_;
    open(my $fh, '>', $file);
    say $fh $cont;
    close($fh);
}
