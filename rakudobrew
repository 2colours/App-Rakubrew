#!/usr/bin/env perl
use strict;
use warnings;
use autodie;
use 5.010;

my $arg = shift // 'help';
my $home = $ENV{HOME};
my $prefix = "$home/.rakudobrew";

my %impls = (
    parrot => {
        configure => 'perl Configure.pl --gen-parrot --gen-nqp'
    },
    jvm => {
        configure => 'perl ConfigureJVM.pl --gen-nqp'
    },
);

if ($arg eq 'switch') {
    my $impl = shift;
    switch($impl);
} elsif ($arg eq 'list') {
    list();
} elsif ($arg eq 'current') {
    if (-e "$prefix/CURRENT") {
        print "Currently running ".slurp("$prefix/CURRENT");
    } else {
        say "Not running anything at the moment. Use 'rakudobrew switch' to set an implementation";
    }
} elsif ($arg eq 'build') {
    my ($impl, $ver) = (shift, shift);
    if ($impl eq 'all') {
        for (qw(parrot jvm)) {
            build_impl($_, $ver);
        }
    } else {
        build_impl($impl, $ver);
    }
} else {
    say "Usage:";
    say "rakudobrew current";
    say "rakudobrew list";
    say "rakudobrew build parrot-2013.06";
    say "rakudobrew switch [jvm|parrot|moarvm]";
}

sub list {
    opendir(my $dh, "$home/.rakudobrew");
    while (readdir $dh) {
        if (-d "$prefix/$_" and "$_" !~ /^\./) {
            say $_
        }
    }
}

sub switch {
    my $impl = shift;
    if ($impl and -d "$prefix/$impl") {
        say "Switching to $impl";
        spurt("$prefix/CURRENT", $impl);
    } else {
        say "Switch to what?";
        say "Available implementations:";
        list();
    }
}

sub build_impl {
    my ($impl, $ver) = @_;
    unless (exists $impls{$impl}) {
        say "Building $impl is NYI. Well volunteered!";
        return;
    }
    $ver //= 'HEAD';
    chdir $prefix;
    unless (-d "$impl-$ver") {
        system "git clone git://github.com/rakudo/rakudo.git $impl-$ver";
    }
    chdir "$impl-$ver";
    system 'git pull';
    system "git checkout $ver";
    if (-e 'Makefile') {
        system 'make realclean';
    }
    system $impls{$impl}{configure};
    system 'make install';
    say "Done, $impl-$ver built";
}

sub slurp {
    my $file = shift;
    open(my $fh, '<', $file);
    local $/ = '';
    my $ret = <$fh>;
    close($fh);
    return $ret;
}

sub spurt {
    my ($file, $cont) = @_;
    open(my $fh, '>', $file);
    say $fh $cont;
    close($fh);
}
