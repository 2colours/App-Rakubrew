#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;
use Cwd;
use FindBin qw($Bin);
use File::Path qw(remove_tree);
use File::Basename qw(basename dirname);
use File::Spec::Functions qw(catfile splitpath catpath);
use Carp qw(croak);

my $brew_name = 'rakudobrew';
$brew_name .= '.pl' if ($^O =~ /win32/i);
my $env_var = 'PL6ENV_VERSION';

my $prefix = "$Bin/..";
my $git_reference = "$prefix/git_reference" ;

unless (-d $git_reference) {
    mkdir $git_reference;
}

my $GIT       = $ENV{GIT_BINARY} // 'git';
my $GIT_PROTO = $ENV{GIT_PROTOCOL} // 'git';
my $PERL5     = $^X;

my %git_repos = (
    rakudo => "$GIT_PROTO://github.com/rakudo/rakudo.git",
    MoarVM => "$GIT_PROTO://github.com/MoarVM/MoarVM.git",
    nqp    => "$GIT_PROTO://github.com/perl6/nqp.git",
    panda  => "$GIT_PROTO://github.com/tadzik/panda.git",
);

my %impls = (
    jvm => {
        name      => "jvm",
        weight    => 20,
        configure => "$PERL5 Configure.pl --backends=jvm --gen-nqp --git-reference=$git_reference --make-install",
        need_repo => ['rakudo', 'nqp'],
    },
    moar => {
        name      => "moar",
        weight    => 30,
        configure => "$PERL5 Configure.pl --backends=moar --gen-moar --git-reference=$git_reference --make-install",
        need_repo => ['rakudo', 'nqp', 'MoarVM'],
    },
    glr => {
        name      => "glr",
        weight    => 30,
        configure => "git checkout glr; git pull; $PERL5 Configure.pl --backends=moar --gen-moar --git-reference=$git_reference --make-install",
        need_repo => ['rakudo', 'nqp', 'MoarVM'],
    },
);

sub run {
    system(@_) and croak "Failed running ".$_[0]
}

{ # Check whether we are called as a shim and forward if yes.
    my (undef, undef, $exec_name) = splitpath($0);

    # TODO: Mac is also case insensitive. Is this way to compensate for insensitivity safe?
    if ($exec_name ne $brew_name &&
    ($^O !~ /win32/i || lc $exec_name ne lc $brew_name)) {
        do_exec($exec_name, \@ARGV);
    }
}

my $arg = shift // 'help';
if ($arg eq 'switch') {
    my $impl = shift;
    switch($impl);
} elsif ($arg eq 'nuke') {
    my $impl = shift;
    nuke($impl);
} elsif ($arg eq 'rehash') {
    rehash();
} elsif ($arg eq 'list') {
    my $cur = current() || '';
    map { say $cur eq $_ ? "* $_" : "  $_" } sort { $a cmp $b } list();
} elsif ($arg eq 'list-available') {
    my ($cur_backend, $cur_rakudo) = split '-', (current() || ''), 2;
    $cur_backend |= '';
    $cur_rakudo |= '';
    say "Available backends:";
    map { say $cur_backend eq $_ ? "* $_" : "  $_" } available_backends();
    say "";
    say "Available Rakudo versions:";
    map { say $cur_rakudo eq $_ ? "* $_" : "  $_" } available_rakudos();
} elsif ($arg eq 'current') {
    if (my $c = current()) {
        say "Currently running $c"
    } else {
        say "Not running anything at the moment. Use '$brew_name switch' to set an implementation";
    }
} elsif ($arg eq 'build') {
    my $impl = shift;
    my $ver = shift
        if @ARGV && $ARGV[0] !~ /^--/;
    my $configure_opts = '';
    if (@ARGV && $ARGV[0] =~ /^--configure-opts=/) {
        $configure_opts = shift;
        $configure_opts =~ s/^\-\-configure-opts=//;
        $configure_opts =~ s/^'//;
        $configure_opts =~ s/'$//;
    }
    if ($impl && $impl eq 'all') {
        for (available_backends()) {
            build_impl($_, $ver, $configure_opts);
        }
    } else {
        build_impl($impl, $ver, $configure_opts);
    }
} elsif ($arg eq 'triple') {
    my ($rakudo_ver, $nqp_ver, $moar_ver) = (shift, shift, shift);
    build_triple($rakudo_ver, $nqp_ver, $moar_ver);
} elsif ($arg eq 'build-panda') {
    my $panda_ver = shift;
    build_panda($panda_ver);
    rehash();
} elsif ($arg eq 'self-upgrade') {
    self_upgrade();
} elsif ($arg eq 'test') {
    my $impl = shift;
    if ($impl && $impl eq 'all') {
        for (list()) {
            test($_);
        }
    } else {
        test($impl);
    }
# plenv interface
} elsif ($arg eq 'exec') {
    my $exec_name = shift;
    do_exec($exec_name, \@ARGV);
} elsif ($arg eq 'version') {
    say get_version();
} elsif ($arg eq 'versions') {
    my $cur = current() || '';
    map { say $cur eq $_ ? "* $_" : "  $_" } sort { $a cmp $b } list();
} elsif ($arg eq 'init') {
    init(@ARGV);
} elsif ($arg eq 'sh') {
    if (!@ARGV) {
        my $shell_version = get_shell_version();
        if (defined $shell_version) {
            print "echo \"$shell_version\"";
        }
        else {
            print "echo \"$brew_name: no shell-specific version configured\"";
        }
    }
    else {
        my $command = shift;
        if ($command eq '--unset') {
            print get_shell_unsetter_code();
        }
        else {
            print get_shell_setter_code($command);
        }
    }
} elsif ($arg eq 'shell') {
    say "The shell hook required to use the 'shell' subcommands is not installed.";
    say "Run '$brew_name init' for instructions to installation.";
} else {
    say "Usage:";
    say "$brew_name current";
    say "$brew_name list";
    say "$brew_name list-available";
    say "$brew_name build " , (join "|", available_backends(), "all"), " [tag|branch|sha-1]", " [--configure-opts=]";
    say "$brew_name build-panda [panda-ver]";
    say "$brew_name triple [rakudo-ver [nqp-ver [moar-ver]]]";
    say "$brew_name rehash";
    say "$brew_name switch ", (join "|", available_backends());
    say "$brew_name nuke ", (join "|", available_backends());
    say "$brew_name self-upgrade";
    say "$brew_name test [", (join "|", available_backends(), "all"), "]";
    say "$brew_name exec program [program-args]";
    say "$brew_name init";
    say "$brew_name shell [version]";
    say "$brew_name version";
    say "$brew_name versions";
}

exit;

sub current {
    if (-e "$prefix/CURRENT") {
        my $cur = slurp("$prefix/CURRENT");
        chomp $cur;
        return $cur;
    }
}

sub available_rakudos {
    my @output = qx|$GIT ls-remote --tags $git_repos{rakudo}|;
    my @tags = grep( m{refs/tags/([^\^]+)\^\{\}}, @output );
    return map(m{tags/([^\^]+)\^}, @tags );
}

sub list {
    opendir(my $dh, $prefix);
    grep {/^[^.]/ && -d "$prefix/$_"
          && $_ ne 'bin' && $_ ne 'git_reference' && $_ ne 'panda'} readdir($dh);
}

sub switch {
    my $impl = shift;
    match_and_run($impl, sub {
        my $matched = shift;
        say "Switching to $matched";
        spurt("$prefix/CURRENT", $matched);
        rehash();
    })
}

sub nuke {
    my $impl = shift;
    match_and_run($impl, sub {
        my $matched = shift;
        say "Nuking $matched";
        remove_tree("$prefix/$matched");
    })
}

sub match_and_run {
    my ($impl, $action) = @_;
    if (!$impl) {
        say "Switch to what?";
        say "Available builds";
        map {say} list();
        return;
    }
    opendir(my $dh, $prefix);
    my @match = grep { /\Q$impl/ } list();
    my ($matched, $ambiguous) = @match;
    if ($ambiguous) {
        my ($exact) = grep { $_ eq $impl } @match;
        if ($exact) {
            ($matched, $ambiguous) = $exact;
        }
    }
    if ($matched and not $ambiguous) {
        $action->($matched);
    } elsif (@match) {
        say "Sorry, I'm not sure if you mean:";
        say $_ for @match;
    } else {
        say "Sorry, I have no idea what '$impl' is";
    }
}

sub available_backends {
    map {$_->{name}} sort {$a->{weight} <=> $b->{weight}} values %impls;
}

sub build_impl {
    my ($impl, $ver, $configure_opts) = @_;
    unless (defined $impl) {
        say "Build what?";
        my ($cur) = split '-', (current() // ''), 2;
        $cur //= '';
        map { say $cur eq $_ ? "* $_" : "  $_" } available_backends();
        return;
    }
    if ($impl eq "panda") {
        build_panda();
        return;
    }
    unless (exists $impls{$impl}) {
        say "Building Rakudo with backend '$impl' is NYI. Well volunteered!";
        return;
    }
    $ver //= 'nom';
    chdir $prefix;
    unless (-d "$impl-$ver") {
        for(@{$impls{$impl}{need_repo}}) {
            update_git_reference($_);
        }
        run "$GIT clone --reference $git_reference/rakudo $git_repos{rakudo} $impl-$ver";
    }
    chdir "$impl-$ver";
    run "$GIT fetch";
    # of people say 'build somebranch', they usually mean 'build origin/somebranch'
    my $ver_to_checkout = $ver;
    eval {
        run "$GIT rev-parse -q --verify origin/$ver";
        $ver_to_checkout = "origin/$ver";
    };
    run "$GIT checkout $ver_to_checkout";

    run $impls{$impl}{configure} . " $configure_opts";

    if (-d 'panda') {
        say "Updating panda as well";
        my $oldcur = current();
        switch("$impl-$ver");
        build_panda();
        switch($oldcur);
    }
    unless (current()) {
        switch("$impl-$ver");
    }
    say "Done, $impl-$ver built";
}

sub update_git_reference {
    my $repo = shift;
    my $back = cwd();
    print "Update git reference: $repo\n";
    chdir $git_reference;
    unless (-d $repo) {
        run "$GIT clone $git_repos{$repo} $repo";
    }
    chdir $repo;
    run "$GIT pull";
    chdir $back;
}

sub build_triple {
    my ($rakudo_ver, $nqp_ver, $moar_ver) = @_;
    my $impl = "moar";
    $rakudo_ver //= 'HEAD';
    $nqp_ver //= 'HEAD';
    $moar_ver //= 'HEAD';
    chdir $prefix;
    my $name = "$impl-$rakudo_ver-$nqp_ver-$moar_ver";
    unless (-d $name) {
        update_git_reference('rakudo');
        run "$GIT clone --reference $git_reference/rakudo $git_repos{rakudo} $name";
    }
    chdir $name;
    run "$GIT pull";
    run "$GIT checkout $rakudo_ver";
    if (-e 'Makefile') {
        run 'make realclean';
    }

    unless (-d "nqp") {
        update_git_reference('nqp');
        run "$GIT clone --reference $git_reference/nqp $git_repos{nqp}";
    }
    chdir "nqp";
    run "$GIT pull";
    run "$GIT checkout $nqp_ver";

    unless (-d "MoarVM") {
        update_git_reference('MoarVM');
        run "$GIT clone --reference $git_reference/MoarVM $git_repos{MoarVM}";
    }
    chdir "MoarVM";
    run "$GIT pull";
    run "$GIT checkout $moar_ver";
    run "$PERL5 Configure.pl --prefix=../../install";
    run "make install";

    chdir "..";
    run "$PERL5 Configure.pl --backend=moar --prefix=../install";
    run "make install";

    chdir "..";
    run "$PERL5 Configure.pl --backend=moar";

    if (system 'make install') {
        die "Failed running make install";
    }
    if (-d 'panda') {
        say "Updating panda as well";
        my $oldcur = current();
        switch($name);
        build_panda();
        switch($oldcur);
    }
    unless (current()) {
        switch($name);
    }
    say "Done, $name built";
}

sub build_panda {
    my ($panda_ver) = @_;
    $panda_ver //= 'HEAD';
    my $impl = current();
    chdir "$prefix/$impl";
    unless (-d 'panda') {
        run "$GIT clone $git_repos{panda}";
    }
    chdir 'panda';
    run "$GIT pull -q";
    run "$GIT checkout -q $panda_ver";
    run "perl6 rebootstrap.pl";
    say "Done, built panda for $impl";
}

sub slurp {
    my $file = shift;
    open(my $fh, '<', $file);
    local $/ = '';
    my $ret = <$fh>;
    close($fh);
    return $ret;
}

sub spurt {
    my ($file, $cont) = @_;
    open(my $fh, '>', $file);
    say $fh $cont;
    close($fh);
}

sub rehash {
    sub dir {
        my $name = shift;
        opendir(my $dh, $name) or return;
        my @ret;
        while (my $entry = readdir $dh) {
            next if $entry =~ /^\./;
            push @ret, "$name/$entry"
        }
        closedir $dh;
        return @ret;
    }

    sub spurt_shim {
        my ($source, $destdir) = @_;
        my $dirname  = dirname $source;
        my $basename = basename $source;

        my $contents;
        if ($^O =~ /win32/i) {
            $contents = sprintf "\"%s\" %%*", $source;
        } else {
            my $tmpl = "#!/bin/sh\nexport PATH=%s:\$PATH\nexec %s \"\$\@\"";
            $contents = sprintf $tmpl, $dirname, $basename;
        }

        spurt("$destdir/$basename", $contents);
        chmod 0755, "$destdir/$basename";
    }

    my $current = current() or return;
    my ($type) = split '-', $current;

    my @paths = ("$prefix/$current/install/bin", "$prefix/$current/install/share/perl6/site/bin");

    say "Updating shims";

    { # Remove the existing shims.
        opendir(my $dh, "$prefix/bin");
        while (my $entry = readdir $dh) {
            next if $entry =~ /^\./;
            next if $entry =~ /$brew_name/;
            unlink "$prefix/bin/$entry";
        }
        closedir $dh;
    }

    my @bins = map { dir($_) } @paths;

    for (@bins) {
        spurt_shim $_, "$prefix/bin";
    }
}

sub self_upgrade {
    chdir $prefix;
    run "$GIT pull";
}

sub test {
    my $impl = shift;
    if (!$impl) {
        $impl = current();
    }
    my @match = grep { /\Q$impl/ } list();
    my ($matched, $ambiguous) = @match;
    if ($ambiguous) {
        my ($exact) = grep { $_ eq $impl } @match;
        if ($exact) {
            ($matched, $ambiguous) = $exact;
        }
    }
    if ($matched and not $ambiguous) {
        say "Spectesting $matched";
        chdir "$prefix/$matched";
        run "make spectest";
    } elsif (@match) {
        say "Sorry, I'm not sure if you mean:";
        say $_ for @match;
    } else {
        say "Sorry, I have no idea what '$impl' is";
        say "Have you run '$brew_name build $impl' yet?";
    }
}

sub not_found {
    my $version = shift;
    return "$brew_name: version '$version' not installed.";
}

sub init {
    if (@_ and $_[0] eq '-') {
        my ($vol, $path, undef) = splitpath($0);
        my $brew_path = catpath($vol, $path, '');
        say <<EOT;
export PATH="$brew_path:\${PATH}"
$brew_name() {
  local command
  command="\$1"
  if [ "\$#" -gt 0 ]; then
    shift
  fi

  case "\$command" in
  shell)
    eval "`$brew_name "sh" "\$@"`";;
  *)
    command $brew_name "\$command" "\$@";;
  esac
}
EOT
    }
    else {
        say <<EOT;
# Load $brew_name automatically by adding
#   eval "\$($brew_name init -)"
# to your local profile file.
# (often ~/.bash_profile or ~/.profile)
# This can be easily done using:

echo 'eval "\$($brew_name init -)"' >> ~/.profile

EOT
    }
}

sub get_shell_setter_code {
    my $version = shift;

    if ($^O =~ /win32/i) {
        #TODO
    }
    else {
        if (check_version($version)) {
            return "export $env_var=\"$version\"";
        }
        else {
            return 'echo "'.not_found($version).'";return 1';
        }
    }
}

sub get_shell_unsetter_code {
    if ($^O =~ /win32/i) {
        #TODO
    }
    else {
        return "unset $env_var";
    }
}

sub get_shell_version {
    # Check for shell version by looking for $PL6ENV_VERSION the environment.
    if (defined $ENV{$env_var}) {
        my $version = $ENV{$env_var};
        if (check_version($version)) {
            return $version;
        }
        else {
            warn "Version '$version' is set via the PL6ENV_VERSION environment variable.";
            warn "This version is not installed. Ignoring.";
            return undef;
        }
    }
    else {
        return undef;
    }
}

sub get_version {
    my $version = get_shell_version();
    return $version if defined $version;
    
    # Check for local version by looking for a `.perl6-version` file in the current and parent folders.
    # TODO

    # Check for global version by looking at `$prefix/CURRENT` (`$prefix/version`)
    return current();
}

sub check_version {
    my $version = shift;
    return undef if !defined $version;
    my %versionsMap = map { $_ => 1 } list();
    return exists($versionsMap{$version});
}

sub do_exec {
    my ($program, $args) = @_;

    my $version = get_version();
    
    # Determine the executable file.
    my $target; {
        my @paths = (
            catfile($prefix, $version, 'install', 'bin', $program),
            catfile($prefix, $version, 'install', 'share', 'perl6', 'site', 'bin', $program),
        );
        if ($^O =~ /win32/i) {
            # On Windows we have to add a .pl suffix (if not already there) to program filenames
            # to make them work without having to call perl explicitly. Thus we strip that prefix
            # when searching for the target.
            my $prog_no_suffix = $program;
            if ($prog_no_suffix =~ s/\.pl$//) {
                push @paths, (
                    catfile($prefix, $version, 'install', 'bin', $prog_no_suffix),
                    catfile($prefix, $version, 'install', 'share', 'perl6', 'site', 'bin', $prog_no_suffix)
                )
            }
        }
        for my $path (@paths) {
            if (-e $path) {
                $target = $path;
                last;
            }
        }
    }

    if (! $target) {
        warn <<EOT;
$brew_name: $program: command not found

The '$program' command exists in these Perl 6 versions:
EOT
        # TODO: Print check other versions and print matching ones here.
        exit 1;
    }
    
    # Run.
    exec { $target } ($target, @$args);
    die "Executing $target failed with: $!";
}
